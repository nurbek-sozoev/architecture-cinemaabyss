{{- if .Values.eventsService.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-service
  namespace: {{ .Values.global.namespace }}
  labels:
    app: events-service
    app.kubernetes.io/name: {{ include "cinemaabyss.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.eventsService.replicas }}
  selector:
    matchLabels:
      app: events-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: events-service
    spec:
      containers:
      - name: events-service
        image: {{ .Values.eventsService.image.repository }}:{{ .Values.eventsService.image.tag }}
        imagePullPolicy: {{ .Values.eventsService.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.eventsService.service.targetPort }}
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "{{ .Values.eventsService.service.targetPort }}"
        - name: KAFKA_BROKERS
          value: "kafka:9092"
        - name: KAFKA_CLIENT_ID
          value: "events-service"
        - name: LOG_LEVEL
          value: "info"
        resources:
          {{- toYaml .Values.eventsService.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: /api/events/health
            port: {{ .Values.eventsService.service.targetPort }}
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/events/health
            port: {{ .Values.eventsService.service.targetPort }}
          initialDelaySeconds: 15
          periodSeconds: 10
      restartPolicy: Always
      imagePullSecrets:
        - name: dockerconfigjson
---
apiVersion: v1
kind: Service
metadata:
  name: events-service
  namespace: {{ .Values.global.namespace }}
  labels:
    app: events-service
    app.kubernetes.io/name: {{ include "cinemaabyss.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: {{ .Values.eventsService.service.type }}
  ports:
  - port: {{ .Values.eventsService.service.port }}
    targetPort: {{ .Values.eventsService.service.targetPort }}
    protocol: TCP
    name: http
  selector:
    app: events-service
{{- end }}
