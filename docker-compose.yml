services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: cinemaabyss-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: cinemaabyss
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinemaabyss-network

  # ZooKeeper for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: cinemaabyss-zookeeper
    ports:
      - "2181:2181"
    networks:
      - cinemaabyss-network

  # Kafka
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: cinemaabyss-kafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "movie-events:1:1,user-events:1:1,payment-events:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cinemaabyss-network

  # Monolith Service
  monolith:
    build:
      context: ./src/monolith
      dockerfile: Dockerfile
    container_name: cinemaabyss-monolith
    depends_on:
      - postgres
    ports:
      - "3280:3280"
    environment:
      PORT: 3280
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Movies Microservice
  movies-service:
    build:
      context: ./src/microservices/movies
      dockerfile: Dockerfile
    container_name: cinemaabyss-movies-service
    depends_on:
      - postgres
    ports:
      - "3281:3281"
    environment:
      PORT: 3281
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Events Microservice (закомментировано - сервис не готов)
  # events-service:
  #   build:
  #     context: ./src/microservices/events
  #     dockerfile: Dockerfile
  #   container_name: cinemaabyss-events-service
  #   depends_on:
  #     - postgres
  #     - kafka
  #   ports:
  #     - "3282:3282"
  #   environment:
  #     PORT: 3282
  #     KAFKA_BROKERS: kafka:9092
  #   networks:
  #     - cinemaabyss-network

  # Proxy Service (API Gateway)
  proxy-service:
    image: kong:3.4
    container_name: cinemaabyss-proxy-service
    restart: unless-stopped
    depends_on:
      monolith:
        condition: service_started
      movies-service:
        condition: service_started
    environment:
      # DB-less режим
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml

      # Логирование
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr

      # Порты
      KONG_ADMIN_LISTEN: 0.0.0.0:3201
      KONG_PROXY_LISTEN: 0.0.0.0:3200

      # Плагины и настройки
      KONG_PLUGINS: bundled
      KONG_LOG_LEVEL: info
    ports:
      - "3200:3200"
      - "3201:3201"
    volumes:
      - ./src/microservices/proxy/kong.yml:/kong/kong.yml:ro
    networks:
      - cinemaabyss-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cinemaabyss-kafka-ui
    depends_on:
      - kafka
    ports:
      - "3290:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cinemaabyss
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cinemaabyss-network

volumes:
  postgres-data:

networks:
  cinemaabyss-network:
    name: cinemaabyss-network
    driver: bridge
