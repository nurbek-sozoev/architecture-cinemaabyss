@startuml CinemaAbyss-Domain-Architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Domains Architecture - To-Be

Person(user, "Пользователи", "Клиенты системы")

System_Boundary(platform, "CinemaAbyss Platform") {
    
    Container(api_gateway, "API Gateway", "Go/Gin", "Единая точка входа, маршрутизация, Strangler Fig")
    
    System_Boundary(user_domain, "User Management Domain") {
        Container(auth_service, "Authentication Service", "Go", "JWT токены, сессии")
        ContainerDb(user_db, "User Database", "PostgreSQL", "Пользователи")
    }
    
    System_Boundary(content_domain, "Content Management Domain") {
        Container(movies_service, "Movies Service", "Go", "CRUD фильмов")
        ContainerDb(content_db, "Content Database", "PostgreSQL", "Метаданные фильмов")
    }
    
    System_Boundary(billing_domain, "Billing Domain") {
        Container(payment_service, "Payment Service", "Go", "Обработка платежей")
        Container(subscription_service, "Subscription Service", "Go", "Подписки")
        ContainerDb(billing_db, "Billing Database", "PostgreSQL", "Платежи, подписки")
    }
    
    System_Boundary(events_domain, "Events Domain") {
        Container(events_service, "Events Service", "Go", "Event Sourcing")
        ContainerDb(events_store, "Event Store", "Apache Kafka", "Поток событий")
    }
    
    System_Boundary(notification_domain, "Notification Domain") {
        Container(notification_service, "Notification Service", "Go", "Email, SMS, Push")
        ContainerDb(notification_db, "Notification Database", "PostgreSQL", "Настройки уведомлений")
    }
    
    System_Boundary(legacy_domain, "Legacy Domain (Временно)") {
        Container(monolith, "Legacy Monolith", "Go", "Остаточная функциональность")
        ContainerDb(legacy_db, "Legacy Database", "PostgreSQL", "Унаследованные данные")
    }
}

System_Ext(payment_providers, "Payment Providers", "Stripe, PayPal, банки")
System_Ext(communication_providers, "Communication Providers", "Email/SMS провайдеры")

Rel(user, api_gateway, "REST API", "HTTPS")

Rel(api_gateway, auth_service, "Аутентификация", "gRPC")
Rel(api_gateway, movies_service, "Управление контентом", "gRPC")
Rel(api_gateway, payment_service, "Платежи", "gRPC")
Rel(api_gateway, subscription_service, "Подписки", "gRPC")
Rel(api_gateway, notification_service, "Уведомления", "gRPC")
Rel(api_gateway, monolith, "Legacy функции", "HTTP", "Strangler Fig Pattern")

Rel(auth_service, events_service, "События пользователей", "Kafka")
Rel(movies_service, events_service, "События контента", "Kafka")
Rel(payment_service, events_service, "События платежей", "Kafka")
Rel(subscription_service, events_service, "События подписок", "Kafka")

Rel(events_service, notification_service, "Уведомления", "Kafka Consumer")

Rel(auth_service, user_db, "Данные пользователей", "SQL")
Rel(movies_service, content_db, "Метаданные фильмов", "SQL")
Rel(payment_service, billing_db, "Данные платежей", "SQL")
Rel(subscription_service, billing_db, "Данные подписок", "SQL")
Rel(notification_service, notification_db, "Настройки уведомлений", "SQL")
Rel(monolith, legacy_db, "Унаследованные данные", "SQL")

Rel(payment_service, payment_providers, "Обработка платежей", "HTTPS")
Rel(notification_service, communication_providers, "Доставка сообщений", "HTTPS")

@enduml
